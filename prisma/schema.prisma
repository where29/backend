generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String
  password String
  role     UserRole @default(USER)

  rsvps  RSVP[]
  events Event[] @relation("EventCreator")

  following Follow[] @relation("Followings")
  followers Follow[] @relation("Followers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Place {
  id        Int    @id @default(autoincrement())
  placeId   String @unique // Google Maps place ID
  name      String
  latitude  Float
  longitude Float

  events Event[]
  rsvps  RSVP[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dateTime    DateTime
  createdById Int
  placeId     Int

  createdBy User   @relation("EventCreator", fields: [createdById], references: [id])
  place     Place  @relation(fields: [placeId], references: [id])
  rsvps     RSVP[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RSVP {
  id       Int      @id @default(autoincrement())
  userId   Int
  placeId  Int
  eventId  Int
  dateTime DateTime
  going    Boolean

  user  User   @relation(fields: [userId], references: [id])
  place Place? @relation(fields: [placeId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, placeId, eventId, dateTime])
}

model Follow {
  followerId  Int
  followingId Int
  status      FollowStatus @default(FOLLOWING)
  createdAt   DateTime     @default(now())

  follower  User @relation("Followings", fields: [followerId], references: [id])
  following User @relation("Followers", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

enum FollowStatus {
  FOLLOWING
  FRIEND
}

enum UserRole {
  USER
  HOST
  ADMIN
}
